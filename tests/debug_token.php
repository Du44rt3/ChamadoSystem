<?php
/**
 * Debug do Sistema de Token CSRF
 */

// Ativar exibi√ß√£o de erros
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

echo "<h1>üîç Debug do Sistema de Token CSRF</h1>";
echo "<hr>";

// Verificar configura√ß√µes de sess√£o
echo "<h2>1. Configura√ß√µes de Sess√£o</h2>";
echo "<ul>";
echo "<li><strong>Session Status:</strong> " . session_status() . " (0=disabled, 1=none, 2=active)</li>";
echo "<li><strong>Session ID:</strong> " . (session_id() ?: 'NENHUM') . "</li>";
echo "<li><strong>Session Name:</strong> " . session_name() . "</li>";
echo "<li><strong>Session Save Path:</strong> " . session_save_path() . "</li>";
echo "</ul>";

// Tentar carregar as classes
echo "<h2>2. Carregamento das Classes</h2>";
try {
    require_once '../config/config.php';
    echo "‚úÖ config.php carregado<br>";
    
    require_once '../src/DB.php';
    echo "‚úÖ DB.php carregado<br>";
    
    require_once '../src/Auth.php';
    echo "‚úÖ Auth.php carregado<br>";
    
    require_once '../src/SecurityValidator.php';
    echo "‚úÖ SecurityValidator.php carregado<br>";
    
} catch (Exception $e) {
    echo "‚ùå Erro ao carregar classes: " . $e->getMessage() . "<br>";
    exit;
}

// Testar conex√£o com banco
echo "<h2>3. Teste de Conex√£o com Banco</h2>";
try {
    $database = new DB();
    $db = $database->getConnection();
    
    if ($db) {
        echo "‚úÖ Conex√£o com banco estabelecida<br>";
        
        // Criar inst√¢ncia do Auth
        $auth = new Auth($db);
        echo "‚úÖ Classe Auth instanciada<br>";
        
    } else {
        echo "‚ùå Falha na conex√£o com banco<br>";
        exit;
    }
} catch (Exception $e) {
    echo "‚ùå Erro na conex√£o: " . $e->getMessage() . "<br>";
    exit;
}

// Testar gera√ß√£o de token CSRF
echo "<h2>4. Teste de Token CSRF</h2>";
try {
    // Primeira gera√ß√£o
    $token1 = $auth->generateCSRFToken();
    echo "‚úÖ <strong>Token gerado:</strong> " . $token1 . "<br>";
    
    // Segunda gera√ß√£o (deve ser o mesmo)
    $token2 = $auth->generateCSRFToken();
    echo "‚úÖ <strong>Token reutilizado:</strong> " . $token2 . "<br>";
    
    if ($token1 === $token2) {
        echo "‚úÖ <strong>Tokens s√£o consistentes</strong><br>";
    } else {
        echo "‚ùå <strong>ERRO: Tokens diferentes!</strong><br>";
    }
    
    // Verificar se est√° na sess√£o
    echo "<strong>Token na sess√£o:</strong> " . ($_SESSION['csrf_token'] ?? 'N√ÉO ENCONTRADO') . "<br>";
    
} catch (Exception $e) {
    echo "‚ùå Erro ao gerar token: " . $e->getMessage() . "<br>";
}

// Testar valida√ß√£o CSRF
echo "<h2>5. Teste de Valida√ß√£o CSRF</h2>";
try {
    // Testar com token correto
    $isValid1 = SecurityValidator::validateCSRF($token1);
    echo "Valida√ß√£o com token correto: " . ($isValid1 ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO') . "<br>";
    
    // Testar com token incorreto
    $isValid2 = SecurityValidator::validateCSRF('token_falso');
    echo "Valida√ß√£o com token falso: " . ($isValid2 ? '‚ùå V√ÅLIDO (ERRO!)' : '‚úÖ INV√ÅLIDO (CORRETO)') . "<br>";
    
    // Testar m√©todo alternativo da classe Auth
    $isValid3 = $auth->verifyCSRFToken($token1);
    echo "Valida√ß√£o via Auth::verifyCSRFToken: " . ($isValid3 ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO') . "<br>";
    
} catch (Exception $e) {
    echo "‚ùå Erro na valida√ß√£o: " . $e->getMessage() . "<br>";
}

// Mostrar todas as vari√°veis de sess√£o
echo "<h2>6. Vari√°veis de Sess√£o</h2>";
echo "<pre>";
print_r($_SESSION);
echo "</pre>";

// Simular formul√°rio de teste
echo "<h2>7. Teste de Formul√°rio</h2>";
echo "<form method='POST' action=''>";
echo "<input type='hidden' name='csrf_token' value='" . $token1 . "'>";
echo "<input type='text' name='test_field' placeholder='Campo de teste' required>";
echo "<button type='submit' name='test_submit'>Testar Token</button>";
echo "</form>";

// Processar teste do formul√°rio
if (isset($_POST['test_submit'])) {
    echo "<h3>Resultado do Teste do Formul√°rio:</h3>";
    $submittedToken = $_POST['csrf_token'] ?? '';
    echo "<strong>Token enviado:</strong> " . $submittedToken . "<br>";
    echo "<strong>Token na sess√£o:</strong> " . ($_SESSION['csrf_token'] ?? 'NENHUM') . "<br>";
    
    $validation = SecurityValidator::validateCSRF($submittedToken);
    echo "<strong>Valida√ß√£o:</strong> " . ($validation ? '‚úÖ SUCESSO' : '‚ùå FALHA') . "<br>";
    
    if (!$validation) {
        echo "<div style='background-color: #ffe6e6; padding: 10px; border: 1px solid #ff6b6b; margin: 10px 0;'>";
        echo "<strong>‚ùå Token inv√°lido detectado!</strong><br>";
        echo "Poss√≠veis causas:<br>";
        echo "1. Sess√£o expirou ou foi reiniciada<br>";
        echo "2. Token foi modificado durante o envio<br>";
        echo "3. Problema na gera√ß√£o/armazenamento do token<br>";
        echo "4. Configura√ß√£o de sess√£o incorreta<br>";
        echo "</div>";
    }
}

echo "<hr>";
echo "<h2>8. Solu√ß√µes Sugeridas</h2>";
echo "<div style='background-color: #f0f8ff; padding: 15px; border: 1px solid #4169e1; margin: 10px 0;'>";
echo "<strong>Para corrigir o erro de token inv√°lido:</strong><br><br>";
echo "1. <strong>Limpar sess√£o:</strong> Feche o navegador e abra novamente<br>";
echo "2. <strong>Verificar cookies:</strong> Limpe os cookies do site<br>";
echo "3. <strong>Configura√ß√£o de sess√£o:</strong> Verifique as configura√ß√µes no .env<br>";
echo "4. <strong>Permiss√µes:</strong> Verifique se o diret√≥rio de sess√£o tem permiss√£o de escrita<br>";
echo "5. <strong>HTTPS:</strong> Se estiver usando HTTPS, ajuste SESSION_SECURE no .env<br>";
echo "</div>";

echo "<p><em>Debug executado em: " . date('Y-m-d H:i:s') . "</em></p>";
?>
